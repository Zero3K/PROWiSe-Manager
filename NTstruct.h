#define MAXIMUM_FILENAME_LENGTH 256
#define DUPLICATE_CLOSE_SOURCE      0x00000001
#define DUPLICATE_SAME_ATTRIBUTES   0x00000004

#define STATUS_ACCESS_DENIED		0xC0000022//Access is denied.
#define STATUS_BUFFER_TOO_SMALL		0xC0000023//The data area passed to a system call is too small.
#define STATUS_NO_MORE_FILES            0x80000006
#define STATUS_NO_MORE_ENTRIES          0x8000001A

//#define FILE_ANY_ACCESS 0x0000
//#define FILE_READ_ATTRIBUTES 0x0080

#define HANDLEFLAG_PROTECT_FROM_CLOSE 0x01

#define InitializeObjectAttributes( p, n, a, r, s ) {   \
    (p)->uLength = sizeof( OBJECT_ATTRIBUTES );          \
    (p)->hRootDirectory = r;                             \
    (p)->uAttributes = a;                                \
    (p)->pObjectName = n;                                \
    (p)->pSecurityDescriptor = s;                        \
    (p)->pSecurityQualityOfService = NULL;               \
}

#define OBJ_INHERIT	     	0x00000002
#define OBJ_PERMANENT	     	0x00000010
#define OBJ_EXCLUSIVE	     	0x00000020
#define OBJ_CASE_INSENSITIVE    0x00000040
#define OBJ_OPENIF		0x00000080
#define OBJ_OPENLINK		0x00000100
#define OBJ_VALID_ATTRIBUTES	0x000001F2

// Object Manager Directory Specific Access Rights.
#define DIRECTORY_QUERY			0x0001
#define DIRECTORY_TRAVERSE		0x0002
#define DIRECTORY_CREATE_OBJECT		0x0004
#define DIRECTORY_CREATE_SUBDIRECTORY	0x0008
#define DIRECTORY_ALL_ACCESS		(STANDARD_RIGHTS_REQUIRED | 0xF)

// Object Manager Symbolic Link Specific Access Rights.
#define SYMBOLIC_LINK_QUERY	       	0x0001
#define SYMBOLIC_LINK_ALL_ACCESS       	(STANDARD_RIGHTS_REQUIRED | 0x1)

// Информация, возвращаемая NtCreateFile/NtOpenFile
#define FILE_SUPERSEDED                 0x00000000
#define FILE_OPENED                     0x00000001
#define FILE_CREATED                    0x00000002
#define FILE_OVERWRITTEN                0x00000003
#define FILE_EXISTS                     0x00000004
#define FILE_DOES_NOT_EXIST             0x00000005

// constants for RtlDetermineDosPathNameType_U
#define DOS_PATHTYPE_UNC				0x00000001	// \\COMPUTER1
#define DOS_PATHTYPE_ROOTDRIVE			0x00000002	// C:\ 
#define DOS_PATHTYPE_STREAM				0x00000003	// X:X or C:
#define DOS_PATHTYPE_NT					0x00000004	// \\??\\C:
#define DOS_PATHTYPE_NAME				0x00000005	// C
#define DOS_PATHTYPE_DEVICE				0x00000006	// \\.\C:
#define DOS_PATHTYPE_LOCALUNCROOT		0x00000007	// \\.

// Define the various device characteristics flags
#define FILE_REMOVABLE_MEDIA            0x00000001
#define FILE_READ_ONLY_DEVICE           0x00000002
#define FILE_FLOPPY_DISKETTE            0x00000004
#define FILE_WRITE_ONCE_MEDIA           0x00000008
#define FILE_REMOTE_DEVICE              0x00000010
#define FILE_DEVICE_IS_MOUNTED          0x00000020
#define FILE_VIRTUAL_VOLUME             0x00000040
#define FILE_AUTOGENERATED_DEVICE_NAME  0x00000080
#define FILE_DEVICE_SECURE_OPEN			0x00000100

#define FILE_SUPERSEDE							0x00000000
#define FILE_OPEN								0x00000001
#define FILE_CREATE								0x00000002
#define FILE_OPEN_IF							0x00000003
#define FILE_OVERWRITE							0x00000004
#define FILE_OVERWRITE_IF						0x00000005
#define FILE_MAXIMUM_DISPOSITION				0x00000005

#define FILE_DIRECTORY_FILE                     0x00000001
#define FILE_WRITE_THROUGH                      0x00000002
#define FILE_SEQUENTIAL_ONLY                    0x00000004
#define FILE_NO_INTERMEDIATE_BUFFERING          0x00000008

#define FILE_SYNCHRONOUS_IO_ALERT               0x00000010
#define FILE_SYNCHRONOUS_IO_NONALERT            0x00000020
#define FILE_NON_DIRECTORY_FILE                 0x00000040
#define FILE_CREATE_TREE_CONNECTION             0x00000080

#define FILE_COMPLETE_IF_OPLOCKED               0x00000100
#define FILE_NO_EA_KNOWLEDGE                    0x00000200
#define FILE_OPEN_FOR_RECOVERY                  0x00000400
#define FILE_RANDOM_ACCESS                      0x00000800

#define FILE_DELETE_ON_CLOSE                    0x00001000
#define FILE_OPEN_BY_FILE_ID                    0x00002000
#define FILE_OPEN_FOR_BACKUP_INTENT             0x00004000
#define FILE_NO_COMPRESSION                     0x00008000

#define FILE_RESERVE_OPFILTER                   0x00100000
#define FILE_OPEN_REPARSE_POINT                 0x00200000
#define FILE_OPEN_NO_RECALL                     0x00400000
#define FILE_OPEN_FOR_FREE_SPACE_QUERY          0x00800000

#define FILE_COPY_STRUCTURED_STORAGE            0x00000041
#define FILE_STRUCTURED_STORAGE                 0x00000441

#define FILE_VALID_OPTION_FLAGS                 0x00ffffff
#define FILE_VALID_PIPE_OPTION_FLAGS            0x00000032
#define FILE_VALID_MAILSLOT_OPTION_FLAGS        0x00000032
#define FILE_VALID_SET_FLAGS                    0x00000036

typedef LARGE_INTEGER QWORD;

typedef struct _VM_COUNTERS{
DWORD PeakVirtualSize;
DWORD VirtualSize;
DWORD PageFaultCount;
DWORD PeakWorkingSetSize;
DWORD WorkingSetSize;
DWORD QuotaPeakPagedPoolUsage;
DWORD QuotaPagedPoolUsage;
DWORD QuotaPeakNonPagedPoolUsage;
DWORD QuotaNonPagedPoolUsage;
DWORD PagefileUsage;
DWORD PeakPagefileUsage;
} VM_COUNTERS;

typedef struct _CLIENT_ID{// sizeof = 8
DWORD UniqueProcessId;
DWORD UniqueThreadId;
}CLIENT_ID, *PCLIENT_ID;

typedef enum _POOL_TYPE
{
	NonPagedPool,
	PagedPool,
	NonPagedPoolMustSucceed,
	DontUseThisType,
	NonPagedPoolCacheAligned,
	PagedPoolCacheAligned,
	NonPagedPoolCacheAlignedMustS,
	MaxPoolType
} POOL_TYPE, *PPOOL_TYPE;

typedef struct _OBJECT_BASIC_INFO {
    ULONG           Attributes;
    ACCESS_MASK     GrantedAccess;
    ULONG           HandleCount;
    ULONG           ReferenceCount;
    ULONG           PagedPoolUsage;
    ULONG           NonPagedPoolUsage;
    ULONG           Reserved[3];
    ULONG           NameInformationLength;
    ULONG           TypeInformationLength;
    ULONG           SecurityDescriptorLength;
    LARGE_INTEGER   CreateTime;
} OBJECT_BASIC_INFO, *POBJECT_BASIC_INFO;

typedef struct _OBJECT_NAME_INFO {
    UNICODE_STRING  ObjectName;
    WCHAR           ObjectNameBuffer[1];
} OBJECT_NAME_INFO, *POBJECT_NAME_INFO;

typedef struct _OBJECT_TYPE_INFORMATION { // Information Class 2
UNICODE_STRING ObjectTypeName;
ULONG ObjectCount;
ULONG HandleCount;
ULONG Reserved1[4];
ULONG PeakObjectCount;
ULONG PeakHandleCount;
ULONG Reserved2[4];
ULONG InvalidAttributes;
GENERIC_MAPPING GenericMapping;
ULONG ValidAccess;
UCHAR Unknown;
BOOLEAN MaintainHandleDatabase;
POOL_TYPE PoolType;
ULONG PagedPoolUsage;
ULONG NonPagedPoolUsage;
} OBJECT_TYPE_INFORMATION, *POBJECT_TYPE_INFORMATION;

typedef struct _OBJECT_ALL_TYPES_INFO {
    ULONG               NumberOfObjectTypes;
    OBJECT_TYPE_INFORMATION    ObjectsTypeInfo[1];
} OBJECT_ALL_TYPES_INFO, *POBJECT_ALL_TYPES_INFO;

typedef struct _OBJECT_PROTECTION_INFO {
    BOOLEAN Inherit;
    BOOLEAN ProtectHandle;
} OBJECT_PROTECTION_INFO, *POBJECT_PROTECTION_INFO;

typedef enum _OBJECT_INFO_CLASS {
    ObjectBasicInfo,
    ObjectNameInfo,
    ObjectTypeInfo,
    ObjectAllTypesInfo,
    ObjectProtectionInfo
} OBJECT_INFO_CLASS;

typedef struct _SYSTEM_THREAD{
DWORD u1;
DWORD u2;
DWORD u3;
DWORD u4;
CLIENT_ID ClientId;
DWORD Priority;
DWORD BasePriority;
DWORD ContextSwitches;
DWORD ThreadState;      // 2=running, 5=waiting
DWORD WaitReason;
DWORD u5;
DWORD u6;
DWORD u7;
DWORD u8;
DWORD u9;
} SYSTEM_THREAD;

typedef struct _SYSTEM_BASIC_INFORMATION {
    ULONG Unknown;
    ULONG MaximumIncrement;
    ULONG PhysicalPageSize;
    ULONG NumberOfPhysicalPages;
    ULONG LowestPhysicalPage;
    ULONG HighestPhysicalPage;
    ULONG AllocationGranularity;
    ULONG LowestUserAddress;
    ULONG HighestUserAddress;
    ULONG ActiveProcessors;
    UCHAR NumberProcessors;
} SYSTEM_BASIC_INFORMATION, *PSYSTEM_BASIC_INFORMATION;

// SystemProcessorInformation
typedef struct _SYSTEM_PROCESSOR_INFORMATION {
    USHORT  ProcessorArchitecture;
    USHORT  ProcessorLevel;
    USHORT  ProcessorRevision;
    USHORT  Unknown;
    ULONG   FeatureBits;
} SYSTEM_PROCESSOR_INFORMATION, *PSYSTEM_PROCESSOR_INFORMATION;

// SystemPerformanceInformation
typedef struct _SYSTEM_PERFORMANCE_INFORMATION {
    LARGE_INTEGER   IdleTime;
    LARGE_INTEGER   ReadTransferCount;
    LARGE_INTEGER   WriteTransferCount;
    LARGE_INTEGER   OtherTransferCount;
    ULONG           ReadOperationCount;
    ULONG           WriteOperationCount;
    ULONG           OtherOperationCount;
    ULONG           AvailablePages;
    ULONG           TotalCommittedPages;
    ULONG           TotalCommitLimit;
    ULONG           PeakCommitment;
    ULONG           PageFaults;
    ULONG           WriteCopyFaults;
    ULONG           TransistionFaults;
    ULONG           Reserved1;
    ULONG           DemandZeroFaults;
    ULONG           PagesRead;
    ULONG           PageReadIos;
    ULONG           Reserved2[2];
    ULONG           PagefilePagesWritten;
    ULONG           PagefilePageWriteIos;
    ULONG           MappedFilePagesWritten;
    ULONG           MappedFilePageWriteIos;
    ULONG           PagedPoolUsage;
    ULONG           NonPagedPoolUsage;
    ULONG           PagedPoolAllocs;
    ULONG           PagedPoolFrees;
    ULONG           NonPagedPoolAllocs;
    ULONG           NonPagedPoolFrees;
    ULONG           TotalFreeSystemPtes;
    ULONG           SystemCodePage;
    ULONG           TotalSystemDriverPages;
    ULONG           TotalSystemCodePages;
    ULONG           SmallNonPagedLookasideListAllocateHits;
    ULONG           SmallPagedLookasideListAllocateHits;
    ULONG           Reserved3;
    ULONG           MmSystemCachePage;
    ULONG           PagedPoolPage;
    ULONG           SystemDriverPage;
    ULONG           FastReadNoWait;
    ULONG           FastReadWait;
    ULONG           FastReadResourceMiss;
    ULONG           FastReadNotPossible;
    ULONG           FastMdlReadNoWait;
    ULONG           FastMdlReadWait;
    ULONG           FastMdlReadResourceMiss;
    ULONG           FastMdlReadNotPossible;
    ULONG           MapDataNoWait;
    ULONG           MapDataWait;
    ULONG           MapDataNoWaitMiss;
    ULONG           MapDataWaitMiss;
    ULONG           PinMappedDataCount;
    ULONG           PinReadNoWait;
    ULONG           PinReadWait;
    ULONG           PinReadNoWaitMiss;
    ULONG           PinReadWaitMiss;
    ULONG           CopyReadNoWait;
    ULONG           CopyReadWait;
    ULONG           CopyReadNoWaitMiss;
    ULONG           CopyReadWaitMiss;
    ULONG           MdlReadNoWait;
    ULONG           MdlReadWait;
    ULONG           MdlReadNoWaitMiss;
    ULONG           MdlReadWaitMiss;
    ULONG           ReadAheadIos;
    ULONG           LazyWriteIos;
    ULONG           LazyWritePages;
    ULONG           DataFlushes;
    ULONG           DataPages;
    ULONG           ContextSwitches;
    ULONG           FirstLevelTbFills;
    ULONG           SecondLevelTbFills;
    ULONG           SystemCalls;
} SYSTEM_PERFORMANCE_INFORMATION, *PSYSTEM_PERFORMANCE_INFORMATION;

// SystemTimeOfDayInformation
typedef struct _SYSTEM_TIME_OF_DAY_INFORMATION {
    LARGE_INTEGER   BootTime;
    LARGE_INTEGER   CurrentTime;
    LARGE_INTEGER   TimeZoneBias;
    ULONG           CurrentTimeZoneId;
} SYSTEM_TIME_OF_DAY_INFORMATION, *PSYSTEM_TIME_OF_DAY_INFORMATION;

typedef struct _SYSTEM_PAGEFILE_INFORMATION {
	ULONG  NextEntryOffset;
	ULONG  CurrentSize;
	ULONG  TotalUsed;
	ULONG  PeakUsed;
	UNICODE_STRING  FileName;
} SYSTEM_PAGEFILE_INFORMATION, *PSYSTEM_PAGEFILE_INFORMATION;

typedef struct _SYSTEM_CACHE_INFORMATION {
    ULONG SystemCacheWsSize;
    ULONG SystemCacheWsPeakSize;
    ULONG SystemCacheWsFaults;
    ULONG SystemCacheWsMinimum;
    ULONG SystemCacheWsMaximum;
    ULONG TransitionSharedPages;
    ULONG TransitionSharedPagesPeak;
    ULONG Reserved[2];
} SYSTEM_CACHE_INFORMATION, *PSYSTEM_CACHE_INFORMATION;

typedef struct _SYSTEM_PROCESS_INFORMATION{
DWORD          NextEntryOffset;
DWORD          ThreadCount;
DWORD          Reserved01;
DWORD          Reserved02;
DWORD          Reserved03;
DWORD          Reserved04;
DWORD          Reserved05;
DWORD          Reserved06;
QWORD          CreateTime;
QWORD          UserTime;
QWORD          KernelTime;
UNICODE_STRING ProcessName;//contains ptr to buffer that contain name of this process
DWORD	       BasePriority;
DWORD          UniqueProcessId;
DWORD          ParentProcessID;
DWORD          HandleCount;
DWORD          Reserved07;
DWORD          Reserved08;
VM_COUNTERS    VmCounters;
DWORD          CommitCharge;
SYSTEM_THREAD  Threads[1];
} SYSTEM_PROCESS_INFORMATION;

typedef struct _SYSTEM_PROCESSOR_TIMES {
    LARGE_INTEGER   IdleTime;
    LARGE_INTEGER   KernelTime;
    LARGE_INTEGER   UserTime;
    LARGE_INTEGER   DpcTime;
    LARGE_INTEGER   InterruptTime;
    ULONG           InterruptCount;
} SYSTEM_PROCESSOR_TIMES, *PSYSTEM_PROCESSOR_TIMES;

typedef struct _SYSTEM_MODULE {
  DWORD Reserved1;
  DWORD Reserved2;
  PVOID ImageBaseAddress;
  DWORD ImageSize;
  DWORD Flags;
  WORD  Id;
  WORD  Rank;
  WORD  LoadCount;
  WORD  NameOffset;
  BYTE  ModulePath[MAXIMUM_FILENAME_LENGTH];
} SYSTEM_MODULE, *PSYSTEM_MODULE;

typedef struct _SYSTEM_MODULE_INFORMATION {
  ULONG         ModulesCount;
  SYSTEM_MODULE Modules[1];
} SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;


typedef struct _RTL_DRIVE_LETTER_CURDIR {
  USHORT                  Flags;
  USHORT                  Length;
  ULONG                   TimeStamp;
  UNICODE_STRING          DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR;

typedef struct _PEB_FREE_BLOCK {
  PVOID         Next;
  ULONG         Size;
} PEB_FREE_BLOCK, *PPEB_FREE_BLOCK;

typedef struct _RTL_USER_PROCESS_PARAMETERS {
  ULONG                   MaximumLength;
  ULONG                   Length;
  ULONG                   Flags;
  ULONG                   DebugFlags;
  PVOID                   ConsoleHandle;
  ULONG                   ConsoleFlags;
  HANDLE                  StdInputHandle;
  HANDLE                  StdOutputHandle;
  HANDLE                  StdErrorHandle;
  UNICODE_STRING          CurrentDirectoryPath;
  HANDLE                  CurrentDirectoryHandle;
  UNICODE_STRING          DllPath;
  UNICODE_STRING          ImagePathName;
  UNICODE_STRING          CommandLine;
  PVOID                   Environment;
  ULONG                   StartingPositionLeft;
  ULONG                   StartingPositionTop;
  ULONG                   Width;
  ULONG                   Height;
  ULONG                   CharWidth;
  ULONG                   CharHeight;
  ULONG                   ConsoleTextAttributes;
  ULONG                   WindowFlags;
  ULONG                   ShowWindowFlags;
  UNICODE_STRING          WindowTitle;
  UNICODE_STRING          DesktopName;
  UNICODE_STRING          ShellInfo;
  UNICODE_STRING          RuntimeData;
  RTL_DRIVE_LETTER_CURDIR DLCurrentDirectory[0x20];
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;

typedef struct _PEB_LDR_DATA {
  ULONG                   Length;
  BOOLEAN                 Initialized;
  PVOID                   SsHandle;
  LIST_ENTRY              InLoadOrderModuleList;
  LIST_ENTRY              InMemoryOrderModuleList;
  LIST_ENTRY              InInitializationOrderModuleList;
} PEB_LDR_DATA, *PPEB_LDR_DATA;

typedef struct _PEB {
  BOOLEAN                 InheritedAddressSpace;
  BOOLEAN                 ReadImageFileExecOptions;
  BOOLEAN                 BeingDebugged;
  BOOLEAN                 Spare;
  HANDLE                  Mutant;
  PVOID                   ImageBaseAddress;
  PPEB_LDR_DATA           LoaderData;
  PRTL_USER_PROCESS_PARAMETERS ProcessParameters;
  PVOID                   SubSystemData;
  PVOID                   ProcessHeap;
  PVOID                   FastPebLock;
  /*PPEBLOCKROUTINE*/PVOID         FastPebLockRoutine;
  /*PPEBLOCKROUTINE*/PVOID         FastPebUnlockRoutine;
  ULONG                   EnvironmentUpdateCount;
  PVOID                  KernelCallbackTable;
  PVOID                   EventLogSection;
  PVOID                   EventLog;
  PPEB_FREE_BLOCK         FreeList;
  ULONG                   TlsExpansionCounter;
  PVOID                   TlsBitmap;
  ULONG                   TlsBitmapBits[0x2];
  PVOID                   ReadOnlySharedMemoryBase;
  PVOID                   ReadOnlySharedMemoryHeap;
  PVOID                   ReadOnlyStaticServerData;
  PVOID                   AnsiCodePageData;
  PVOID                   OemCodePageData;
  PVOID                   UnicodeCaseTableData;
  ULONG                   NumberOfProcessors;
  ULONG                   NtGlobalFlag;
  BYTE                    Spare2[0x4];
  LARGE_INTEGER           CriticalSectionTimeout;
  ULONG                   HeapSegmentReserve;
  ULONG                   HeapSegmentCommit;
  ULONG                   HeapDeCommitTotalFreeThreshold;
  ULONG                   HeapDeCommitFreeBlockThreshold;
  ULONG                   NumberOfHeaps;
  ULONG                   MaximumNumberOfHeaps;
  PVOID                   *ProcessHeaps;
  PVOID                   GdiSharedHandleTable;
  PVOID                   ProcessStarterHelper;
  PVOID                   GdiDCAttributeList;
  PVOID                   LoaderLock;
  ULONG                   OSMajorVersion;
  ULONG                   OSMinorVersion;
  ULONG                   OSBuildNumber;
  ULONG                   OSPlatformId;
  ULONG                   ImageSubSystem;
  ULONG                   ImageSubSystemMajorVersion;
  ULONG                   ImageSubSystemMinorVersion;
  ULONG                   GdiHandleBuffer[0x22];
  ULONG                   PostProcessInitRoutine;
  ULONG                   TlsExpansionBitmap;
  BYTE                    TlsExpansionBitmapBits[0x80];
  ULONG                   SessionId;
  /*winXP news:
  ULARGE_INTEGER AppCompatFlags
  ULARGE_INTEGER AppCompatFlagsUser
  PVOID pShimData
  PVOID AppCompatInfo
  UNICODE_STRING CSDVersion
  PVOID ActivationContextData
  PVOID ProcessAssemblyStorageMap
  PVOID SystemDefaultActivationContextData
  PVOID SystemAssemblyStorageMap
  DWORD MinimumStackCommit
  DWORD
  */
} PEB, *PPEB;

typedef struct _TEB {
	NT_TIB			Tib;                         
	PVOID			EnvironmentPointer;           
	CLIENT_ID		Cid;                      
	PVOID			ActiveRpcInfo;                
	PVOID			ThreadLocalStoragePointer;    
	PPEB			Peb;                           
	ULONG			LastErrorValue;               
	ULONG			CountOfOwnedCriticalSections; 
	PVOID			CsrClientThread;              
	PVOID			Win32ThreadInfo;              
	ULONG			Win32ClientInfo[0x1F];        
	PVOID			WOW32Reserved;                
	ULONG			CurrentLocale;                
	ULONG			FpSoftwareStatusRegister;     
	PVOID			SystemReserved1[0x36];        
	PVOID			Spare1;                       
	LONG			ExceptionCode;                 
	ULONG			SpareBytes1[0x28];            
	PVOID			SystemReserved2[0xA];         
	ULONG			gdiRgn;                       
	ULONG			gdiPen;                       
	ULONG			gdiBrush;                     
	CLIENT_ID		RealClientId;             
	PVOID			GdiCachedProcessHandle;       
	ULONG			GdiClientPID;                 
	ULONG			GdiClientTID;                 
	PVOID			GdiThreadLocaleInfo;          
	PVOID			UserReserved[5];              
	PVOID			glDispatchTable[0x118];       
	ULONG			glReserved1[0x1A];            
	PVOID			glReserved2;                  
	PVOID			glSectionInfo;                
	PVOID			glSection;                    
	PVOID			glTable;                      
	PVOID			glCurrentRC;                  
	PVOID			glContext;                    
	NTSTATUS		LastStatusValue;           
	UNICODE_STRING	StaticUnicodeString; 
	WCHAR			StaticUnicodeBuffer[0x105];   
	PVOID			DeallocationStack;            
	PVOID			TlsSlots[0x40];               
	LIST_ENTRY		TlsLinks;                
	PVOID			Vdm;                          
	PVOID			ReservedForNtRpc;             
	PVOID			DbgSsReserved[0x2];           
	ULONG			HardErrorDisabled;            
	PVOID			Instrumentation[0x10];        
	PVOID			WinSockData;                  
	ULONG			GdiBatchCount;                
	ULONG			Spare2;                       
	ULONG			Spare3;                       
	ULONG			Spare4;                       
	PVOID			ReservedForOle;               
	ULONG			WaitingOnLoaderLock;          
	PVOID			StackCommit;                  
	PVOID			StackCommitMax;               
	PVOID			StackReserve;                 
} TEB, *PTEB;

typedef struct _LDR_MODULE {
  LIST_ENTRY              InLoadOrderModuleList;
  LIST_ENTRY              InMemoryOrderModuleList;
  LIST_ENTRY              InInitializationOrderModuleList;
  PVOID                   BaseAddress;
  PVOID                   EntryPoint;
  ULONG                   SizeOfImage;
  UNICODE_STRING          FullDllName;
  UNICODE_STRING          BaseDllName;
  ULONG                   Flags;
  SHORT                   LoadCount;
  SHORT                   TlsIndex;
  LIST_ENTRY              HashTableEntry;
  ULONG                   TimeDateStamp;
} LDR_MODULE, *PLDR_MODULE;

//ProcessBasicInformation
typedef struct _PROCESS_BASIC_INFORMATION{
    NTSTATUS ExitStatus;
    PPEB PebBaseAddress; //PPEB structure
    DWORD AffinityMask;
    DWORD BasePriority;
    DWORD UniqueProcessId;
    DWORD ParentProcessId;
} PROCESS_BASIC_INFORMATION;

typedef struct _THREAD_BASIC_INFORMATION {
  NTSTATUS           ExitStatus;
  PTEB            TebBaseAddress;
  CLIENT_ID          ClientId;
  DWORD              AffinityMask;
  DWORD              Priority;
  DWORD              BasePriority;
} THREAD_BASIC_INFORMATION, *PTHREAD_BASIC_INFORMATION;

typedef struct _THREAD_TIMES_INFORMATION {
 LARGE_INTEGER CreationTime;
 LARGE_INTEGER ExitTime;
 LARGE_INTEGER KernelTime;
 LARGE_INTEGER UserTime;
}THREAD_TIMES_INFORMATION;

typedef struct _THREAD_INFORMATION{
DWORD		ProcessId;
DWORD		ThreadId;
HANDLE		ThreadHandle;	
} THREAD_INFORMATION;

typedef struct _SYSTEM_HANDLE{
DWORD	ProcessID;
UCHAR	HandleTypeNumber;
UCHAR   Flags;
USHORT  HandleValue;
PVOID	ObjectPointer;
ACCESS_MASK	GrantedAccess;
} SYSTEM_HANDLE;

/*SYSTEM_HANDLE_INFORMATION.Flags cosntants */
#define PROTECT_FROM_CLOSE                0x01
#define INHERIT                           0x02

//SystemHandleInfo
typedef struct _SYSTEM_HANDLE_INFORMATION{
DWORD		Count;
SYSTEM_HANDLE	Handles[1];
} SYSTEM_HANDLE_INFORMATION;

typedef struct _MODULE_INFO{
DWORD	ProcessId;
TCHAR	FullPath[_MAX_PATH];
TCHAR	Name[_MAX_PATH];
HMODULE Handle;
} MODULE_INFO;

typedef struct _INITIAL_TEB {
PVOID StackBase;
PVOID StackLimit;
PVOID StackCommit;
PVOID StackCommitMax;
PVOID StackReserved;
} INITIAL_TEB, *PINITIAL_TEB;

typedef enum _THREAD_INFORMATION_CLASS {
 ThreadBasicInformation,
 ThreadTimes,
 ThreadPriority,
 ThreadBasePriority,
 ThreadAffinityMask,
 ThreadImpersonationToken,
 ThreadDescriptorTableEntry,
 ThreadEnableAlignmentFaultFixup,
 ThreadEventPair,
 ThreadQuerySetWin32StartAddress,
 ThreadZeroTlsCell,
 ThreadPerformanceCount,
 ThreadAmILastThread,
 ThreadIdealProcessor,
 ThreadPriorityBoost,
 ThreadSetTlsArrayAddress,
 ThreadIsIoPending,
 ThreadHideFromDebugger
} THREAD_INFORMATION_CLASS, *PTHREAD_INFORMATION_CLASS;

typedef enum _FILE_INFORMATION_CLASS {
 FileDirectoryInformation=1,
 FileFullDirectoryInformation,
 FileBothDirectoryInformation,
 FileBasicInformation,
 FileStandardInformation,
 FileInternalInformation,
 FileEaInformation,
 FileAccessInformation,
 FileNameInformation,
 FileRenameInformation,
 FileLinkInformation,
 FileNamesInformation,
 FileDispositionInformation,
 FilePositionInformation,
 FileFullEaInformation,
 FileModeInformation,
 FileAlignmentInformation,
 FileAllInformation,
 FileAllocationInformation,
 FileEndOfFileInformation,
 FileAlternateNameInformation,
 FileStreamInformation,
 FilePipeInformation,
 FilePipeLocalInformation,
 FilePipeRemoteInformation,
 FileMailslotQueryInformation,
 FileMailslotSetInformation,
 FileCompressionInformation,
 FileCopyOnWriteInformation,
 FileCompletionInformation,
 FileMoveClusterInformation,
 FileQuotaInformation,
 FileReparsePointInformation,
 FileNetworkOpenInformation,
 FileObjectIdInformation,
 FileTrackingInformation,
 FileOleDirectoryInformation,
 FileContentIndexInformation,
 FileInheritContentIndexInformation,
 FileOleInformation,
 FileMaximumInformation
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef struct _IO_STATUS_BLOCK{// sizeof = 8
 NTSTATUS Status;
 DWORD Information;
}IO_STATUS_BLOCK,*PIO_STATUS_BLOCK;

//ProcessTimes
typedef struct _PROCESS_TIMES{
  LARGE_INTEGER CreationTime;
  LARGE_INTEGER ExitTime;
  LARGE_INTEGER KernelTime;
  LARGE_INTEGER UserTime;//FILETIME
}PROCESS_TIMES;

typedef enum _PROCESS_INFO_CLASS{
 ProcessBasicInformation=0,// 0
 ProcessQuotaLimits=1,// 1
 ProcessIoCounters,// 2
 ProcessVmCounters,// 3
 ProcessTimes,// 4
 ProcessBasePriority,// 5
 ProcessRaisePriority,// 6
 ProcessDebugPort,// 7
 ProcessExceptionPort,// 8
 ProcessAccessToken,// 9
 ProcessLdtInformation,// 10
 ProcessLdtSize,// 11
 ProcessDefaultHardErrorMode,// 12
 ProcessIoPortHandlers,// 13 ; Note: this is kernel mode only
 ProcessPooledUsageAndLimits,// 14
 ProcessWorkingSetWatch,// 15
 ProcessUserModeIOPL,// 16
 ProcessEnableAlignmentFaultFixup,//
 ProcessPriorityClass,// 18
 ProcessWx86Information,// 19
 ProcessHandleCount,// 20
 ProcessAffinityMask,// 21
 ProcessPriorityBoost,// 22
 ProcessDeviceMap,// 23
 ProcessSessionInformation,// 24
 ProcessForegroundInformation,// 25
 ProcessWow64Information,// 26
 MaxProcessInfoClass,// 27
 //29-Critical info ????
}PROCESS_INFO_CLASS,*PPROCESS_INFO_CLASS;

typedef enum _SYSTEM_INFORMATION_CLASS {
 SystemBasicInformation=0,
 SystemProcessorInformation=1,
 SystemPerformanceInformation,// 2
 SystemTimeOfDayInformation,// 3
 SystemNotImplemented1,// 4
 SystemProcessesAndThreadsInformation,// 5
 SystemCallCounts,// 6
 SystemConfigurationInformation,// 7
 SystemProcessorTimes,// 8
 SystemGlobalFlag,// 9
 SystemNotImplemented2,// 10
 SystemModuleInformation,// 11 //SystemDriverInformation
 SystemLockInformation,// 12
 SystemNotImplemented3,// 13
 SystemNotImplemented4,// 14
 SystemNotImplemented5,// 15
 SystemHandleInformation,// 16
 SystemObjectInformation,// 17
 SystemPagefileInformation,// 18
 SystemInstructionEmulationCounts,// 19
 SystemInvalidInfoClass1,// 20
 SystemCacheInformation,// 21
 SystemPoolTagInformation,// 22
 SystemProcessorStatistics,// 23
 SystemDpcInformation,// 24
 SystemNotImplemented6,// 25
 SystemLoadImage,// 26
 SystemUnloadImage,// 27
 SystemTimeAdjustment,// 28
 SystemNotImplemented7,// 29
 SystemNotImplemented8,// 30
 SystemNotImplemented9,// 31
 SystemCrashDumpInformation,// 32
 SystemExceptionInformation,// 33
 SystemCrashDumpStateInformation,// 34
 SystemKernelDebuggerInformation,// 35
 SystemContextSwitchInformation,// 36
 SystemRegistryQuotaInformation,// 37
 SystemLoadAndCallImage,// 38
 SystemPrioritySeparation,// 39
 SystemNotImplemented10,// 40
 SystemNotImplemented11,// 41
 SystemInvalidInfoClass2,// 42
 SystemInvalidInfoClass3,// 43
 SystemTimeZoneInformation,// 44
 SystemLookasideInformation,// 45
 SystemSetTimeSlipEvent,// 46
 SystemCreateSession,// 47
 SystemDeleteSession,// 48
 SystemInvalidInfoClass4,// 49
 SystemRangeStartInformation,// 50
 SystemVerifierInformation,// 51
 SystemAddVerifier,// 52
 SystemSessionProcessesInformation//53
}SYSTEM_INFORMATION_CLASS, *PSYSTEM_INFORMATION_CLASS;

typedef enum _SHUTDOWN_ACTION {
 ShutdownNoReboot=0,
 ShutdownReboot=1,
 ShutdownPowerOff=2
} SHUTDOWN_ACTION, *PSHUTDOWN_ACTION;

/*typedef struct _TPERF_DATA_BLOCK{
        WCHAR Signature[4];
        DWORD LittleEndian;
        DWORD Version;
        DWORD Revision;
        DWORD TotalByteLength;
        DWORD HeaderLength;
        DWORD NumObjectTypes;
        LONG DefaultObject;
        SYSTEMTIME SystemTime;
        DWORD Reserved;
        LARGE_INTEGER PerfTime;
        LARGE_INTEGER PerfFreq;
        LARGE_INTEGER PerfTime100nSec;
        DWORD SystemNameLength;
        DWORD SystemNameOffset;
}TPERF_DATA_BLOCK;*/

//SYSTEM_CONTEXT_SWITCH_INFORMATION
typedef struct _SYSTEM_CONTEXT_SWITCH_INFORMATION {
    ULONG ContextSwitches;
    ULONG FindAny;
    ULONG FindLast;
    ULONG FindIdeal;
    ULONG IdleAny;
    ULONG IdleCurrent;
    ULONG IdleLast;
    ULONG IdleIdeal;
    ULONG PreemptAny;
    ULONG PreemptCurrent;
    ULONG PreemptLast;
    ULONG SwitchToIdle;
} SYSTEM_CONTEXT_SWITCH_INFORMATION, *PSYSTEM_CONTEXT_SWITCH_INFORMATION; 

// SystemProcessorStatistics
typedef struct _SYSTEM_PROCESSOR_STATISTICS {
    ULONG ContextSwitches;
    ULONG DpcCount;
    ULONG DpcRequestRate;
    ULONG TimeIncrement;
    ULONG DpcBypassCount;
    ULONG ApcBypassCount;
} SYSTEM_PROCESSOR_STATISTICS, *PSYSTEM_PROCESSOR_STATISTICS;

typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
	ULONG   Reserved[2];
	PVOID  Base;
	ULONG  Size;
	ULONG  Flags;
	USHORT  Index;
  /* Length of module name not including the path, this
     field contains valid value only for NTOSKRNL module */
	USHORT	NameLength;
	USHORT  LoadCount;
	USHORT  PathLength;
	CHAR  ImageName[256];
} SYSTEM_MODULE_INFORMATION_ENTRY, *PSYSTEM_MODULE_INFORMATION_ENTRY;

// SystemSessionProcessesInformation
typedef struct _SYSTEM_SESSION_PROCESS_INFORMATION {
    ULONG SessionId;
    ULONG BufferSize;
    PVOID Buffer;
} SYSTEM_SESSION_PROCESS_INFORMATION, *PSYSTEM_SESSION_PROCESS_INFORMATION;

typedef struct _FILE_STANDARD_INFORMATION {                 
    LARGE_INTEGER AllocationSize;                           
    LARGE_INTEGER EndOfFile;                                
    ULONG NumberOfLinks;                                    
    BOOLEAN DeletePending;                                  
    BOOLEAN Directory;                                      
}FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION;

typedef struct _FILE_BASIC_INFORMATION {                    
    LARGE_INTEGER CreationTime;                             
    LARGE_INTEGER LastAccessTime;                           
    LARGE_INTEGER LastWriteTime;                            
    LARGE_INTEGER ChangeTime;                               
    ULONG FileAttributes;                                   
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;

typedef struct _FILE_NAME_INFORMATION {
    ULONG FileNameLength;                                   
    WCHAR FileName[1];                                      
} FILE_NAME_INFORMATION, *PFILE_NAME_INFORMATION;

typedef struct _FILE_MODE_INFORMATION { // Information Class 16
ULONG Mode;
} FILE_MODE_INFORMATION, *PFILE_MODE_INFORMATION;

typedef struct _FILE_PIPE_INFORMATION {
    ULONG ReadMode;
    ULONG CompletionMode;
} FILE_PIPE_INFORMATION, *PFILE_PIPE_INFORMATION;

typedef struct _FILE_DIRECTORY_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_DIRECTORY_INFORMATION, *PFILE_DIRECTORY_INFORMATION;

typedef struct _Var {
    WORD  wLength; 
    WORD  wValueLength; 
    WORD  wType; 
    WCHAR szKey[]; 
    WORD  Padding[]; 
    DWORD Value[]; 
}Var;

typedef enum _KEY_VALUE_INFORMATION_CLASS {
 KeyValueBasicInformation,
 KeyValueFullInformation,
 KeyValuePartialInformation,
 KeyValueFullInformationAlign64,
 KeyValuePartialInformationAlign64
} KEY_VALUE_INFORMATION_CLASS;

typedef enum _KEY_INFORMATION_CLASS {
    KeyBasicInformation,
    KeyNodeInformation,
    KeyFullInformation
} KEY_INFORMATION_CLASS;

typedef struct _KEY_BASIC_INFORMATION {
    LARGE_INTEGER LastWriteTime;
    ULONG   TitleIndex;
    ULONG   NameLength;
    WCHAR   Name[1];// Variable length string
} KEY_BASIC_INFORMATION, *PKEY_BASIC_INFORMATION;

typedef struct _KEY_VALUE_PARTIAL_INFORMATION {
    ULONG   TitleIndex;
    ULONG   Type;
    ULONG   DataLength;
    UCHAR   Data[1];            // Variable size
} KEY_VALUE_PARTIAL_INFORMATION, *PKEY_VALUE_PARTIAL_INFORMATION;

typedef
VOID
(*PIO_APC_ROUTINE) (
 IN PVOID ApcContext,
 IN PIO_STATUS_BLOCK IoStatusBlock,
 IN ULONG Reserved
);

////////////////////////// NTSTATUS ERRORS /////////////////////////////////////
#define STATUS_OBJECT_PATH_INVALID       0xC0000039
#define STATUS_OBJECT_PATH_NOT_FOUND     0xC000003A
#define STATUS_OBJECT_PATH_SYNTAX_BAD    0xC000003B

